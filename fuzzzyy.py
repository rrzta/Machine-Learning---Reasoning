# -*- coding: utf-8 -*-
"""fuzzzyy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S7qTuyxlEDuSwPUdxA9drzLQ2tUiacY4
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

x1 = [0,45,57.5,100]
y1 = [1,1,0,0]

x2 = [0,52.5,60,75,85,100]
y2 = [0,0,1,1,0,0]

x3 = [0,75,90,100]
y3 = [0,0,1,1]

plt.figure(figsize=(10,4))
plt.xticks([5,15,25,35,45,55,65,75,85,95,100])
plt.title("Kualitas Service",fontsize=20) 

plt.plot(x1, y1, label='Buruk')
plt.plot(x2, y2, label='Cukup')
plt.plot(x3, y3, label='Baik')
plt.legend()

x1 = [0,5,6,10]
y1 = [1,1,0,0]

x2 = [0,5.5,6,7.5,8.5,10]
y2 = [0,0,1,1,0,0]

x3 = [0,8.5,9,10]
y3 = [0,0,1,1]

plt.figure(figsize=(10,4))
plt.xticks([1,2,3,4,5,6,7,8,9,10])
plt.title("Kualitas Harga",fontsize=20) 

plt.plot(x1, y1, label='Murah')
plt.plot(x2, y2, label='Sedang')
plt.plot(x3, y3, label='Mahal')
plt.legend()

df = pd.read_excel('bengkel.xlsx')
data = df.to_numpy().copy()
print(data)

def service_baik(x,a=75,b=90):
    if x <= a:
        return 0
    if x > a and x < b:
        return ((x-a)/(b-a))
    if x >= b:
        return 1

def service_cukup(x,a=52.5,b=60,c=75,d=85):
    if x <= a:
        return 0
    if x > a and x < b:
        return ((x-a)/(b-a))
    if x >= b and x <= c : 
        return 1
    if x > c and x <= d : 
        return -((x-d)/(d-c)) 
    if x >= d:
        return 0

def service_buruk(x,a=45,b=57.5):
    if x <= a:
        return 1
    if x > a and x < b:
        return ((x-a)/(b-a))
    if x >= b:
        return 0

def harga_mahal(x,a=8.5,b=9):
    if x <= a:
        return 0
    if x > a and x < b:
        return ((x-a)/(b-a))
    if x >= b:
        return 1

def harga_sedang(x,a=5.5,b=6,c=7.5,d=8.5):
    if x <= a:
        return 0
    if x > a and x < b:
        return ((x-a)/(b-a))
    if x >= b and x <= c : 
        return 1
    if x > c and x <= d : 
        return -((x-d)/(d-c)) 
    if x >= d:
        return 0

def harga_murah(x,a=5,b=6):
    if x <= a:
        return 1
    if x > a and x < b:
        return ((x-a)/(b-a))
    if x >= b:
        return 0

def fuzzification_service(service):
    service_rate = {}
    service_rate['baik'] = service_baik(service)
    service_rate['cukup'] = service_cukup(service)
    service_rate['buruk'] = service_buruk(service)
    return service_rate


def fuzzification_harga(harga):
    harga_rate = {}
    harga_rate['mahal'] = harga_mahal(harga)
    harga_rate['sedang'] = harga_sedang(harga)
    harga_rate['murah'] = harga_murah(harga)
    return harga_rate

def inference(service_rate, harga_rate):
    inference_rate = {'Diterima': [],'Dipertimbangkan': [], 'Ditolak': []}

    inference_rate['Dipertimbangkan'].append(min(service_rate['baik'],harga_rate['mahal']))
    inference_rate['Diterima'].append(min(service_rate['baik'],harga_rate['sedang']))
    inference_rate['Diterima'].append(min(service_rate['baik'],harga_rate['murah']))

    inference_rate['Ditolak'].append(min(service_rate['cukup'],harga_rate['mahal']))
    inference_rate['Dipertimbangkan'].append(min(service_rate['cukup'],harga_rate['sedang']))
    inference_rate['Diterima'].append(min(service_rate['cukup'],harga_rate['murah']))

    inference_rate['Ditolak'].append(min(service_rate['buruk'],harga_rate['mahal']))
    inference_rate['Ditolak'].append(min(service_rate['buruk'],harga_rate['sedang']))
    inference_rate['Dipertimbangkan'].append(min(service_rate['buruk'],harga_rate['murah']))

    inference_rate['Diterima'] = max(inference_rate['Diterima'])
    inference_rate['Dipertimbangkan'] = max(inference_rate['Dipertimbangkan'])
    inference_rate['Ditolak'] = max(inference_rate['Ditolak'])

    return inference_rate

def defuzzification_sugeno(inference_rate):
    a = inference_rate['Diterima']
    b = inference_rate['Dipertimbangkan']
    c = inference_rate['Ditolak']
    result1 = ((a*100)+(b*80)+(c*50))
    result2 = (a+b+c)
    result3 = (result1/result2)

    return result3

data_fuz = np.pad(data,((0,0),(0,1)), mode='constant', constant_values= 0)

def main(data):
    for i in range(data.shape[0]):
        quality = fuzzification_service(data[i,1])
        price = fuzzification_harga(data[i,2])

        inf_rate = inference(quality,price)

        result = defuzzification_sugeno(inf_rate)

        data[i,3] = result

    return data

main(data_fuz)

def getbest(data):
  choosenone = []
  for i in range(10):
    choosenone.append(data[np.argmax(data, axis=0)[3]])
    data = np.delete(data,np.argmax(data, axis=0)[3],0)

  return np.array(choosenone)

thechoosenone = getbest(data_fuz)
print(thechoosenone)

data_frame = pd.DataFrame().from_records(thechoosenone)
data_frame.columns = ['id', 'service', 'price', 'rate']
data_frame.to_excel("peringkat.xlsx")
print(data_frame)